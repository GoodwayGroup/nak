#!/usr/bin/env node

var options = require('commander'),
    fs = require('fs'),
    path = require('path'),
    walk = require('../lib/walkdir'),
    XRegExp = require('xregexp').XRegExp;

options
  .version('0.1.0')
  .usage("[options] 'PATTERN' ['REPLACEMENT'] PATH")
  .option('-l, --list', 'list files encountered')
  .option('-H, --hidden', 'search hidden files and directories (default off)')
  .option('-c, --color',  'adds color to results  (default off)')
  .option('-p, --pathToAgignore <file>',  'path to an agignore file')
  .option('-m, --maxdepth <num>',  'the maximum depth of the search')
  .option('-q, --literal',  'do not parse PATTERN as a regular expression; match it literally')
  .option('-w, --wordRegexp', 'only match whole words')
  .option('-i, --ignoreCase', 'match case insensitively')
  .parse(process.argv);

// no args

if (options.args.length < 1) {
  process.stdout.write(options.helpInformation());
  process.exit(0);
}

// arguments
var fpath = path.resolve(options.args.pop()),
    query = options.args.length > 0 ? options.args.pop() : "", 
    fileColor = "", textColor = "", matchColor = "";

if (options.color) {
  fileColor = '\n\033[36m%s\033[0m';
  textColor = '\033[37;43m$1\033[0;90m';
  matchColor = '\033[90m%s';
}

// whitespace

process.on('exit', console.log);

var exclusions = dirExclusions = [];
if (options.pathToAgignore) {
  exclusions = fs.readFileSync(options.pathToAgignore, "utf-8");
}

try {
  dirExclusions = fs.readFileSync(fpath + "/.agignore", "utf-8");
} catch (e) { };

if (exclusions.length || dirExclusions.length) {
  options.exclusions = (dirExclusions.length > 0 ? exclusions + dirExclusions : exclusions).split(/\r?\n/).filter(function (e) { return !!e && /^[^#]/.test(e)});
  options.exclusionsLength = options.exclusions.length;
}

/**
 * Search `fpath`.
 *
 * @param {String} fpath
 */

var start2 = new Date();

if (query.length) {
  var flags = "gs";
  if (options.literal) 
    query = XRegExp.escape(query);
  if (options.ignoreCase)
    flags += "i";

  options.query = XRegExp( (options.wordRegexp ? "\b(" : "(") + query + (options.wordRegexp ? ")\b" : ")"), flags);
}

if (options.list) {
  console.log(walk(fpath, options));
}
else {
  // "streaming" output like this is slower, 
  // but serves a purpose when finding text
  walk(fpath,options,function(file, lines){ 
    console.log(fileColor, file);
    if (options.color) lines = lines.replace(query, textColor);
    console.log(matchColor, lines);
  });
  var end2 = new Date() - start2;

  console.log(end2)
}
